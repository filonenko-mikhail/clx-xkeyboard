;;;; clx-xkeyboard.lisp

(in-package :xlib)

(pushnew :clx-ext-xkeyboard *features*)

(define-extension "XKEYBOARD"
  :events () 
  :errors (xkeyboard-error))

(export '(+use-core-kbd+
          +use-core-ptr+
          xkeyboard-error
          make-device-state
          device-state-p
          copy-device-state
          device-state-device-id
          device-state-mods
          device-state-base-mods
          device-state-latched-mods
          device-state-locked-mods
          device-state-group
          device-state-locked-group
          device-state-base-group
          device-state-latched-group
          device-state-compat-state
          device-state-grab-mods
          device-state-compat-grab-mods
          device-state-lookup-mods
          device-state-compat-lookup-mods
          device-state-ptr-btn-state
          get-state
          latch-lock-state
          lock-group
          ))

(define-condition xkeyboard-error (request-error) ())

(define-error xkeyboard-error decode-core-error)


;;; Types
(defmacro define-card8-abrev (name)
  `(define-accessor ,name (8)
     ((index) `(read-card8 ,index))
     ((index thing) `(write-card8 ,index ,thing))))

(defmacro define-card16-abrev (name)
  `(define-accessor ,name (16)
     ((index) `(read-card16 ,index))
     ((index thing) `(write-card16 ,index ,thing))))

(defmacro define-card32-abrev (name)
  `(define-accessor ,name (32)
     ((index) `(read-card32 ,index))
     ((index thing) `(write-card32 ,index ,thing))))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (define-card16-abrev devicespec)
  (define-card8-abrev keycode)
  (define-card8-abrev keymask)

  (define-card16-abrev butmask)
  (define-card16-abrev vmodmask)

  (define-card16-abrev gbndetailmask)
  (define-card16-abrev devfeature)
  (define-card16-abrev feature)
  (define-card16-abrev idresult)
  (define-card16-abrev vmod)
  (define-card16-abrev idspec) 
  (define-card16-abrev devicespec)
  (define-card16-abrev behavior) 
  (define-card16-abrev mapdetails)
  (define-card32-abrev indicator)
  (define-card32-abrev name-detail)
  (define-card8-abrev belldetail)
  (define-card8-abrev msgdetail)
  (define-card8-abrev imflags) 
  (define-card8-abrev explicit)
  (define-card16-abrev eventtype) 
  (define-card16-abrev bellclassspec)
  (define-card16-abrev nkndetail)
  (define-card16-abrev statepart)
  (define-card32-abrev control)
  (define-card8-abrev cmdetail)
  (define-card16-abrev xidetail) 

  (define-card8-abrev group)

  (define-card8-abrev groups)
  (define-card8-abrev immodswhich)
  (define-card8-abrev imgroupswhich)
  (define-card8-abrev imflag)
  (define-card8-abrev bellclassresult)
  (define-card16-abrev axoption)
  (define-card32-abrev boolctrl)
  (define-card16-abrev mappart)
  (define-card16-abrev setmapflags) 
  (define-card16-abrev ledclassspec)
  (define-card16-abrev axndetail)
  (define-card32-abrev namedetail)
  (define-card32-abrev perclientflag))

(deftype devicespec () 'card8)
(deftype keycode () 'card8)
(deftype keymask () 'card8)
(deftype butmask () 'card16)
(deftype vmodmask () 'card16)
(deftype gbndetailmask () 'card16)
(deftype devfeature () 'card16)
(deftype feature () 'card16)
(deftype idresult () 'card16)
(deftype vmod () 'card16)
(deftype idspec () 'card16)
(deftype devicespec () 'card16)
(deftype behavior () 'card16)
(deftype mapdetails () 'card16)
(deftype indicator () 'card32)
(deftype name-detail () 'card32)
(deftype belldetail () 'card8)
(deftype msgdetail () 'card8)
(deftype imflags () 'card8)
(deftype explicit () 'card8)
(deftype eventtype () 'card16)
(deftype bellclassspec () 'card16)
(deftype nkndetail () 'card16)
(deftype statepart () 'card16)
(deftype control () 'card32)
(deftype cmdetail () 'card8)
(deftype xidetail () 'card16)
(deftype group () 'card8)
(deftype groups () 'card8)
(deftype immodswhich () 'card8)
(deftype imgroupswhich () 'card8)
(deftype imflag () 'card8)
(deftype bellclassresult () 'card8)
(deftype axoption () 'card16)
(deftype boolctrl () 'card32)
(deftype mappart () 'card16)
(deftype setmapflags () 'card16)
(deftype ledclassspec () 'card16)
(deftype axndetail () 'card16)
(deftype namedetail () 'card32)
(deftype perclientflag () 'card32)

 ;;; XKeyboard opcodes
(defconstant +use-extension+ 0)
(defconstant +select-events+ 1)
(defconstant +bell+ 3)
(defconstant +get-state+ 4)
(defconstant +latch-lock-state+ 5)
(defconstant +get-controls+ 6)
(defconstant +set-controls+ 7)
(defconstant +get-map+ 8)
(defconstant +set-map+ 9)
(defconstant +get-compat-map+ 10)
(defconstant +set-compat-map+ 11)
(defconstant +get-indicator-state+ 12)
(defconstant +get-indicator-map+ 13)
(defconstant +set-indicator-map+ 14)
(defconstant +get-named-indicator+ 15)
(defconstant +set-named-indicator+ 16)
(defconstant +get-names+ 17)
(defconstant +set-names+ 18)
(defconstant +get-geometry+ 19)
(defconstant +set-geometry+ 20)
(defconstant +per-client-flags+ 21)
(defconstant +list-components+ 22)
(defconstant +get-kbd-by-name+ 23)
(defconstant +get-device-info+ 24)
(defconstant +set-device-info+ 25)
(defconstant +set-debugging-flags+ 101)

 ;;; Enum Constants
(defconstant +new-keyboard-notify+ #x0001)
(defconstant +map-notify+ #x0002)
(defconstant +state-notify+ #x0004)
(defconstant +controls-notify+ #x0008)
(defconstant +indicator-state-notify+ #x0010)
(defconstant +indicator-map-notify+ #x0020)
(defconstant +names-notify+ #x0040)
(defconstant +compat-map-notify+ #x0080)
(defconstant +bell-notify+ #x0100)
(defconstant +action-message+ #x0200)
(defconstant +access-xnotify+ #x0400)
(defconstant +extension-device-notify+ #x0800)

(defconstant +NKN_Keycodes+ #x01)
(defconstant +NKN_Geometry+ #x02)
(defconstant +NKN_DeviceID+ #x04)
(defconstant +AXN_SKPress+ #x01)
(defconstant +AXN_SKAccept+ #x02)
(defconstant +AXN_SKReject+ #x04)
(defconstant +AXN_SKRelease+ #x08)
(defconstant +AXN_BKAccept+ #x10)
(defconstant +AXN_BKReject+ #x20)
(defconstant +AXN_AXKWarning+ #x40)

(defconstant +KeyTypes+ #x0001)
(defconstant +KeySyms+ #x0002)
(defconstant +ModifierMap+ #x0004)
(defconstant +ExplicitComponents+ #x0008)
(defconstant +KeyActions+ #x0010)
(defconstant +KeyBehaviors+ #x0020)
(defconstant +VirtualMods+ #x0040)
(defconstant +VirtualModMap+ #x0080)
(defconstant +ModifierState+ #x0001)
(defconstant +ModifierBase+ #x0002)
(defconstant +ModifierLatch+ #x0004)
(defconstant +ModifierLock+ #x0008)
(defconstant +GroupState+ #x0010)
(defconstant +GroupBase+ #x0020)
(defconstant +GroupLatch+ #x0040)
(defconstant +GroupLock+ #x0080)
(defconstant +CompatState+ #x0100)
(defconstant +GrabMods+ #x0200)
(defconstant +CompatGrabMods+ #x0400)
(defconstant +LookupMods+ #x0800)
(defconstant +CompatLookupMods+ #x1000)
(defconstant +PointerButtons+ #x2000)
(defconstant +RepeatKeys+ #x00000001)
(defconstant +SlowKeys+ #x00000002)
(defconstant +BounceKeys+ #x00000004)
(defconstant +StickyKeys+ #x00000008)
(defconstant +MouseKeys+ #x00000010)
(defconstant +MouseKeysAccel+ #x00000020)
(defconstant +AccessXKeys+ #x00000040)
(defconstant +AccessXTimeoutMask+ #x00000080)
(defconstant +AccessXFeedbackMask+ #x00000100)
(defconstant +AudibleBellMask+ #x00000200)
(defconstant +Overlay1Mask+ #x00000400)
(defconstant +Overlay2Mask+ #x00000800)
(defconstant +IgnoreGroupLockMask+ #x00001000)
(defconstant +RepeatKeys+ #x00000001) 
(defconstant +SlowKeys+ #x00000002)
(defconstant +BounceKeys+ #x00000004)
(defconstant +StickyKeys+ #x00000008)
(defconstant +MouseKeys+ #x00000010)
(defconstant +MouseKeysAccel+ #x00000020)
(defconstant +AccessXKeys+ #x00000040)
(defconstant +AccessXTimeoutMask+ #x00000080)
(defconstant +AccessXFeedbackMask+ #x00000100)
(defconstant +AudibleBellMask+ #x00000200)
(defconstant +Overlay1Mask+ #x00000400)
(defconstant +Overlay2Mask+ #x00000800)
(defconstant +IgnoreGroupLockMask+ #x00001000)
(defconstant +GroupsWrap+ 27) 
(defconstant +InternalMods+ 28)
(defconstant +IgnoreLockMods+ 29)
(defconstant +PerKeyRepeat+ 30)
(defconstant +ControlsEnabled+ 31)
(defconstant +AX_SKPressFB+ #x0001) 
(defconstant +AX_SKAcceptFB+ #x0002)
(defconstant +AX_FeatureFB+ #x0004) 
(defconstant +AX_SlowWarnFB+ #x0008)
(defconstant +AX_IndicatorFB+ #x0010)
(defconstant +AX_StickyKeysFB+ #x0020)
(defconstant +AX_SKReleaseFB+ #x0100)
(defconstant +AX_SKRejectFB+ #x0200) 
(defconstant +AX_BKRejectFB+ #x0400)
(defconstant +AX_DumbBell+ #x0800)
(defconstant +AX_TwoKeys+ #x0040)
(defconstant +AX_LatchToLock+ #x0080)
(defconstant +AX_SKPressFB+ #x0001) 
(defconstant +AX_SKAcceptFB+ #x0002)
(defconstant +AX_FeatureFB+ #x0004)
(defconstant +AX_SlowWarnFB+ #x0008)
(defconstant +AX_IndicatorFB+ #x0010)
(defconstant +AX_StickyKeysFB+ #x0020)
(defconstant +AX_TwoKeys+ #x0040)
(defconstant +AX_LatchToLock+ #x0080)
(defconstant +AX_SKReleaseFB+ #x0100)
(defconstant +AX_SKRejectFB+ #x0200)
(defconstant +AX_BKRejectFB+ #x0400)
(defconstant +AX_DumbBell+ #x0800)

(defconstant +kbd-feedback-class+ 0)
(defconstant +led-feedback-class+ 4)
(defconstant +kbd-feedback-class+ 0)
(defconstant +led-feedback-class+ 4)

(defconstant +DfltXIClass+ #x0300)
(defconstant +AllXIClasses+ #x0500)
(defconstant +KbdFeedbackClass+ 0)
(defconstant +BellFeedbackClass+ 5)
(defconstant +KbdFeedbackClass+ 0)
(defconstant +BellFeedbackClass+ 5)
(defconstant +DfltXIClass+ #x0300)
(defconstant +DfltXIId+ #x0400)
(defconstant +DfltXIId+ #x0400)
(defconstant +XINone+ #xff00)
(defconstant +DfltXIId+ #x0400)
(defconstant +AllXIIds+ #x0500)

(defconstant +group1+ 0)
(defconstant +group2+ 1)
(defconstant +group3+ 2)
(defconstant +group4+ 3)
(defconstant +group1+ 0)
(defconstant +group2+ 1)
(defconstant +group3+ 2)
(defconstant +group4+ 3)

(defconstant +any-group+ 254)
(defconstant +all-groups+ 255)
(defconstant +wrap-into-range+ #x00)
(defconstant +clamp-into-range+ #x40)
(defconstant +redirect-into-range+ #x80)
;; (defconstant +virtual_modifier_15+ #x80)
;; (defconstant +virtual_modifier_14+ #x40)
;; (defconstant +virtual_modifier_13+ #x20)
;; (defconstant +virtual_modifier_12+ #x10)
;; (defconstant +virtual_modifier_11+ #x08)
;; (defconstant +virtual_modifier_10+ #x04)
;; (defconstant +virtual_modifier_9+ #x02)
;; (defconstant +virtual_modifier_8+ #x01)
;; (defconstant +virtual_modifier_7+ #x80)
;; (defconstant +virtual_modifier_6+ #x40)
;; (defconstant +virtual_modifier_5+ #x20)
;; (defconstant +virtual_modifier_4+ #x10)
;; (defconstant +virtual_modifier_3+ #x08)
;; (defconstant +virtual_modifier_2+ #x04)
;; (defconstant +virtual_modifier_1+ #x02)
;; (defconstant +virtual_modifier_0+ #x01)
;; (defconstant +virtual_modifier_15+ #x8000)
;; (defconstant +virtual_modifier_14+ #x4000)
;; (defconstant +virtual_modifier_13+ #x2000)
;; (defconstant +virtual_modifier_12+ #x1000)
;; (defconstant +virtual_modifier_11+ #x0800)
;; (defconstant +virtual_modifier_10+ #x0400)
;; (defconstant +virtual_modifier_9+ #x0200)
;; (defconstant +virtual_modifier_8+ #x0100)
;; (defconstant +virtual_modifier_7+ #x0080)
;; (defconstant +virtual_modifier_6+ #x0040)
;; (defconstant +virtual_modifier_5+ #x0020)
;; (defconstant +virtual_modifier_4+ #x0010)
;; (defconstant +virtual_modifier_3+ #x0008)
;; (defconstant +virtual_modifier_2+ #x0004)
;; (defconstant +virtual_modifier_1+ #x0002)
;; (defconstant +virtual_modifier_0+ #x0001)
(defconstant +explicit-vmod-map+ #x80)
(defconstant +explicit-behavior+ #x40)
(defconstant +explicit-auto-repeat+ #x20)
(defconstant +explicit-interpret+ #x10)
(defconstant +explicit-key-type4+ #x08)
(defconstant +explicit-key-type3+ #x04)
(defconstant +explicit-key-type2+ #x02)
(defconstant +explicit-key-type1+ #x01)

(defconstant +IM_NoExplicit+ #x80)
(defconstant +IM_NoAutomatic+ #x40)
(defconstant +IM_LEDDrivesKB+ #x20)
(defconstant +IM_UseCompat+ #x10)
(defconstant +IM_UseEffective+ #x08)
(defconstant +IM_UseLocked+ #x04)
(defconstant +IM_UseLatched+ #x02)
(defconstant +IM_UseBase+ #x01)
(defconstant +IM_UseCompat+ #x10)
(defconstant +IM_UseEffective+ #x08)
(defconstant +IM_UseLocked+ #x04)
(defconstant +IM_UseLatched+ #x02)
(defconstant +IM_UseBase+ #x01)
(defconstant +SymInterp+ #x01)
(defconstant +GroupCompat+ #x02)

(defconstant +keycodes-name+ #x0001)
(defconstant +geometry-name+ #x0002)
(defconstant +symbols-name+ #x0004)
(defconstant +phys-symbols-name+ #x0008)
(defconstant +types-name+ #x0010)
(defconstant +compat-name+ #x0020)
(defconstant +key-type-names+ #x0040)
(defconstant +ktlevel-names+ #x0080)
(defconstant +indicator-names+ #x0100)
(defconstant +key-names+ #x0200)
(defconstant +key-aliases+ #x0400)
(defconstant +virtual-mod-names+ #x0800)
(defconstant +group-names+ #x1000)
(defconstant +rgnames+ #x2000)

(defconstant +GBN_Types+ #x01)
(defconstant +GBN_CompatMap+ #x02)
(defconstant +GBN_ClientSymbols+ #x04)
(defconstant +GBN_ServerSymbols+ #x08)
(defconstant +GBN_IndicatorMaps+ #x10)
(defconstant +GBN_KeyNames+ #x20)
(defconstant +GBN_Geometry+ #x40)
(defconstant +GBN_OtherNames+ #x80)
(defconstant +XI_ButtonActions+ #x02)
(defconstant +XI_IndicatorNames+ #x04)
(defconstant +XI_IndicatorMaps+ #x08)
(defconstant +XI_IndicatorState+ #x10)
(defconstant +XI_Keyboards+ #x01)
(defconstant +XI_ButtonActions+ #x02)
(defconstant +XI_IndicatorNames+ #x04)
(defconstant +XI_IndicatorMaps+ #x08)
(defconstant +XI_IndicatorState+ #x10)
(defconstant +XI_Keyboards+ #x01)
(defconstant +XI_ButtonActions+ #x02)
(defconstant +XI_IndicatorNames+ #x04)
(defconstant +XI_IndicatorMaps+ #x08)
(defconstant +XI_IndicatorState+ #x10)
(defconstant +XI_UnsupportedFeature+ #x8000)
(defconstant +DetectableAutorepeat+ #x01)
(defconstant +GrabsUseXKBState+ #x02)
(defconstant +AutoResetControls+ #x04)
(defconstant +LookupStateWhenGrabbed+ #x08)
(defconstant +SendEventUsesXKBState+ #x10)
(defconstant +SetMapResizeTypes+ #x01)
(defconstant +SetMapRecomputeActions+ #x02)
(defconstant +OutlineDoodad+ 1)
(defconstant +SolidDoodad+ 2)
(defconstant +TextDoodad+ 3)
(defconstant +IndicatorDoodad+ 4)
(defconstant +LogoDoodad+ 5)

 ;;; The version we implement
(defconstant +major-version+ 1)
(defconstant +minor-version+ 0)

 ;;; KB_DEVICESPEC card8
 ;;; 0..255     input extension device id
(defconstant +use-core-kbd+ #x100)
(defconstant +use-core-ptr+ #x200)

 ;;; KB_BELLCLASSRESULT card8
;;KbdFeedbackClass , BellFeedbackClass , DfltXIClass ,
;;                  AllXIClasses
;;     0     KbdFeedbackClass
;;     5     BellFeedbackClass
(defconstant +kbd-feedback-class+ 0)
(defconstant +bell-feedback-class+ 5)

(defstruct moddef
  (mask 0 :type keymask)
  (real-mods 0 :type keymask)
  (vmods 0 :type vmodmask))

;; TODO
(defstruct action
  (type 0 :type card8))

(defmacro xkeyboard-opcode (display)
  `(extension-opcode ,display "XKEYBOARD"))

(defun enable-xkeyboard (display &optional (major +major-version+) (minor +minor-version+))
  (declare (type display display))
  (with-buffer-request-and-reply (display (xkeyboard-opcode display) nil)
                                 ((data +use-extension+)
                                  (card16 major)
                                  (card16 minor))
    (values (boolean-get 1)
            (card16-get 8))))

(export 'enable-xkeyboard)

;; (defun select-events (display))


(defun xkb-bell (display &key (device +use-core-kbd+)
                       bell-class id percent force-sound event-only pitch duration name window)
  (declare (type display display)
           (type devicespec device)
           (type window window))
  (with-buffer-request (display (xkeyboard-opcode display))
    (data +bell+)
    (devicespec device)
    (bellclassspec bell-class)
    (idspec id)
    (card8 percent)
    (boolean force-sound)
    (boolean event-only)
    (pad8 0)
    (int16 pitch)
    (int16 duration)
    (pad16 0)
    (keyword name)
    (window window)))

(defstruct device-state 
  (device-id 0 :type card8)
  (mods 0 :type keymask)
  (base-mods 0 :type keymask)
  (latched-mods 0 :type keymask)
  (locked-mods 0 :type keymask)
  (group 0 :type group)
  (locked-group 0 :type group)
  (base-group 0 :type int16)
  (latched-group 0 :type int16)
  (compat-state 0 :type keymask)
  (grab-mods 0 :type keymask)
  (compat-grab-mods 0 :type keymask)
  (lookup-mods 0 :type keymask)
  (compat-lookup-mods 0 :type keymask)
  (ptr-btn-state 0 :type butmask))

(defun get-state (display &optional (device +use-core-kbd+))
  (declare (type display display))
  (with-buffer-request-and-reply (display (xkeyboard-opcode display) nil)
                                 ((data +get-state+)
                                  (devicespec device)
                                  (pad16 0))
    (make-device-state
     :device-id (card8-get 1)
     :mods (keymask-get 8)
     :base-mods (keymask-get 9)
     :latched-mods (keymask-get 10)
     :locked-mods (keymask-get 11)
     :group (group-get 12)
     :locked-group (group-get 13)
     :base-group (int16-get 14)
     :latched-group (int16-get 16)
     :compat-state (keymask-get 18)
     :lookup-mods (keymask-get 19)
     :compat-lookup-mods (keymask-get 20)
     :ptr-btn-state (butmask-get 22))))

(defun latch-lock-state (display &key (device +use-core-kbd+)
                                   affect-mod-locks
                                   mod-locks
                                   lock-group
                                   group-lock
                                   affect-mod-latches
                                   mod-latches
                                   latch-group
                                   group-latch)
  (declare (type display display))
  (with-buffer-request (display (xkeyboard-opcode display))
    (data +latch-lock-state+)
    (devicespec device)
    (keymask affect-mod-locks)
    (keymask mod-locks)
    (boolean lock-group)
    (group group-lock)
    (keymask affect-mod-latches)
    (keymask mod-latches)
    (pad8 0)
    (boolean latch-group)
    (int16 group-latch)))

(defun lock-group (display &key (device +use-core-kbd+) group)
  (latch-lock-state display :device device
                            :affect-mod-locks 0
                            :mod-locks 0
                            :lock-group t
                            :group-lock group
                            :affect-mod-latches 0
                            :mod-latches 0
                            :latch-group nil
                            :group-latch 0))

;;; Local Variables:
;;; indent-tabs-mode: nil
;;; End:
